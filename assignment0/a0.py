# '''
# the 10 most frequent words in this dataset using whitespace tokenization
# '''

# f = open("nyt.txt", "r")
# nyt = f.readlines()
# word_cnt = {}
# for line in nyt:
#     words = line.split()
#     for word in words:
#         word.lower()
#         if word not in word_cnt.keys():
#             word_cnt[word]=1
#         else:
#             word_cnt[word]+=1
# word_cnt_sort = sorted(word_cnt.items(),key=lambda x:x[1], reverse=True)
# print("the 10 most frequent words in this dataset using whitespace tokenization: ", word_cnt_sort[:10])

# '''
# the 10 most frequent words in this dataset using smarter tokenization
# '''
# import nltk
# word_cnt_2 = {}
# word_cnt_nltk={}
# for line in nyt:
#     words = nltk.word_tokenize(line)
#     for word in words:
#         word.lower()
#         if word not in word_cnt_2.keys():
#             word_cnt_2[word]=1
#         else:
#             word_cnt_2[word]+=1
# word_cnt_sort_smart = sorted(word_cnt_2.items(),key=lambda x:x[1], reverse=True)
# print("the 10 most frequent words in this dataset using smarter tokenization: ", word_cnt_sort_smart[:10])         

# '''
# a plot of inverse rank vs. word count for the smart tokenization scheme
# '''

# import matplotlib.pyplot as plt
# inv_ranks=[]
# word_counts=[]
# for i in range(100):
#     inv_rank=1.0/(i+1)
#     inv_ranks.append(inv_rank)
#     word_count = word_cnt_sort_smart[i][1]
#     word_counts.append(word_count)

# plt.plot(inv_ranks, word_counts, color='b', marker='^', linewidth=1)
# plt.axis([0, 1, 0, 30000])
# plt.grid()
# plt.xlabel("inverse rank")
# plt.ylabel("word count")
# plt.show()

# '''
# top 100 words 
# '''
# print(word_cnt_sort_smart[:100])

import matplotlib.pyplot as plt
# alpha = 0.1
loss0=[0.4222077081119816, 0.3394528658136044, 0.2849990221742059, 0.2476438255995896, 0.21036300520676826, 0.18416469040879546, 0.1690815565314012, 0.15723691000217827, 0.15008984871043207, 0.14081441808171208, 0.1277873872080223, 0.12081147220050592, 0.12153309657534332, 0.10853290133151201, 0.10788173109049716, 0.09698723248973727, 0.0925618382473638, 0.0902529910084167, 0.084612765995007, 0.08131969960726781, 0.07912997571531502, 0.07724369609999485, 0.07395696095332627, 0.0718291754724705, 0.06906660318152988, 0.06675532947567488, 0.06543666499458199, 0.06271383026312795, 0.06181144234904338, 0.059361305183242966]
# alpha = 0.5
loss1 = [0.7080951195331746, 0.3713451608845538, 0.45297538343371946, 0.16706100536767599, 0.13789119125856628, 0.07606078233244122, 0.04547011081455552, 0.043475677040823356, 0.036762017430303315, 0.039077135736451045, 0.024742295823165637, 0.022233209558626968, 0.026998555708323296, 0.01897018099542117, 0.018666342033233484, 0.016905702438542832, 0.016201575773869898, 0.016979358842112203, 0.014721087483485657, 0.013758849785344087, 0.013625290282810253, 0.013489072600411317, 0.012411894127045546, 0.012270059716843647, 0.012037339598692938, 0.011730098979551993, 0.011162024585646213, 0.010796887812102878, 0.010425831115080192, 0.010232089717552439]
# alpha = 1
loss2 = [1.3893299497287073, 0.6937529378185843, 1.0585628398613767, 0.23793523963138338, 0.4840459457983442, 0.16555344832375293, 0.10550849640806094, 0.07083315159015484, 0.1330206389257294, 0.07237363048712159, 0.01582618024437168, 0.009700230975213315, 0.00904992004276665, 0.005707769649831281, 0.004836177578942151, 0.003736351808523526, 0.003577553845780087, 0.003024775450443661, 0.002913368526954201, 0.0027260580471236847, 0.002677167550783281, 0.002553965730214509, 0.002442961682639311, 0.00238280292391205, 0.002570281649053116, 0.0022683440608734975, 0.0021888419324367614, 0.0021643608529381543, 0.0020817341399544786, 0.0021400093484472233]
# alpha = 1/t
loss3 = [1.3893299497287073, 0.5856240489516433, 0.1623769983380272, 0.1206831438410878, 0.11852128446700963, 0.11820592051465063, 0.11816178591226911, 0.11815628333020609, 0.11815567227180733, 0.11815561116701091, 0.1181556056120362, 0.11815560514912185, 0.11815560511351303, 0.11815560511096959, 0.11815560511080052, 0.11815560511078944, 0.11815560511078892, 0.11815560511078858, 0.11815560511078865, 0.11815560511078838, 0.1181556051107888, 0.11815560511078889, 0.11815560511078838, 0.1181556051107887, 0.11815560511078857, 0.11815560511078847, 0.11815560511078828, 0.11815560511078838, 0.11815560511078876, 0.11815560511078886]
# alpha = 1/sqrt(t)
loss4 = [1.3893299497287073, 0.716282832560022, 0.24354821135822544, 0.08250592185560854, 0.06463339601317888, 0.06152811882002684, 0.06049486834327236, 0.06022967682383683, 0.06012286888543577, 0.060092982044186206, 0.060084180688774615, 0.060081647066082135, 0.06008094513417221, 0.060080757598528545, 0.0600807091768845, 0.06008069707171173, 0.06008069413580093, 0.06008069344380148, 0.06008069328504591, 0.06008069324954721, 0.06008069324180073, 0.06008069324014918, 0.060080693239804715, 0.060080693239734764, 0.0600806932397203, 0.060080693239717785, 0.060080693239717264, 0.06008069323971698, 0.06008069323971705, 0.06008069323971703]
# alpha = alpha * 0.9
# loss5 = [0.9548002782201963, 0.6402958436029246, 0.6588400700568285, 0.1832398662686888, 0.11697272225459852, 0.04089628433532092, 0.028351043403775825, 0.024266469146407014, 0.021910687284199485, 0.018806895862114977, 0.015467509766814996, 0.014575348792443614, 0.015675736297570863, 0.013587015463713974, 0.013226359813381165, 0.012907587385633128, 0.01248355056522429, 0.012259161427964602, 0.012109917920837454, 0.011922800514881636, 0.011856951438758262, 0.01173229009482627, 0.011609328906891703, 0.011485714278371842, 0.011577605536140219, 0.011340995469731524, 0.011288228693886177, 0.011230408035849855, 0.01117879973043478, 0.011138985500809056]
l0 = plt.plot(range(30), loss0, linewidth=0.8, label = 'alpha=0.1')
l1 = plt.plot(range(30), loss1, linewidth=0.8, label = 'alpha=0.5')
l2 = plt.plot(range(30), loss2, linewidth=0.8, label = 'alpha=1')
l3 = plt.plot(range(30), loss3, linewidth=0.8, label = 'alpha = 1/t')
l4 = plt.plot(range(30), loss4, linewidth=0.8, label = 'alpha = 1/sqrt(t)')
# l5 = plt.plot(range(30), loss5, color='chocolate', linewidth=0.6)
label=['alpha=0.5', 'alpha = 1', 'alpha = 1/t', 'alpha = 1/sqrt(t)']
# plt.legend(handles=[l1,l2,l3,l4],labels = label, loc=0,
#         ncol=4, mode="expand",borderaxespad=0.)
plt.legend()
# plt.axis([0, 1, 0, 30000])
plt.grid()
plt.xlabel("epochs")
plt.ylabel("loss")
plt.show()